/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 231:
/***/ (function() {

// extracted by mini-css-extract-plugin

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";

;// CONCATENATED MODULE: ./src/Rmodal.js
class Rmodal {
  constructor(selector, options) {
    let defaultOptions = {
      isOpen: () => {},
      isClose: () => {},
      defaultSpeed: 300,
      autoFocusToCloseBtn: false,
      modalOverlayName: 'data-modal-overlay',
      modalWindowName: 'data-modal-target',
      modalWindowSpeedName: 'data-modal-speed',
      modalCloseBtnName: 'data-modal-close',
      autoOpenName: 'data-auto-open',
      modalOverlayBlockName: 'show',
      disableScrollName: 'dis-scroll',
      modalWindowBlockName: 'block',
      modalWindowShowName: 'show'
    };
    this.options = Object.assign(defaultOptions, options);
    this.btns = document.querySelectorAll(selector);
    this.modalOpened = false;
    this.speed = null;
    this.modalOverlay = document.querySelector(`[${this.options.modalOverlayName}]`);
    this.window = null;
    this.modalCloseBtn = null;
    this.modalFocusElems = null;
    this.previusFocusElem = null;
    this.documentFocusElems = null;
    this.previusActiveWindow = null;
    this.focusElems = ['a[href]', 'input', 'button', 'select', 'textarea', '[tabindex]'];
    this.events();
  }

  events() {
    document.addEventListener('DOMContentLoaded', () => {
      if (this.btns.length > 0) {
        this.btns.forEach(btnEl => {
          document.addEventListener('click', e => {
            if (e.target == btnEl) {
              this.getDataPath(btnEl);

              if (!this.modalOpened) {
                if (new Date().getTime() - this.lastClick < this.speed) return;
                this.lastClick = new Date().getTime();
                this.openModal(this.window);
                e.preventDefault();
              }

              if (this.modalOpened) {
                if (new Date().getTime() - this.lastClick < this.speed) return;
                this.lastClick = new Date().getTime();
                this.previusActiveWindow = document.querySelector(`.${this.options.modalWindowBlockName}.${this.options.modalWindowShowName}`);

                if (this.previusActiveWindow != this.window) {
                  this.reOpenModal(this.previusActiveWindow, this.window);
                }
              }
            }

            if (e.target == this.modalCloseBtn || e.target == this.modalOverlay) {
              if (new Date().getTime() - this.lastClick < this.speed) return;
              this.lastClick = new Date().getTime();

              if (this.modalOpened) {
                this.closeModal(this.window);
                e.preventDefault();
              }
            }
          });
        });
        document.addEventListener('keydown', e => {
          if (this.modalOpened) {
            if (e.code === 'Tab') {
              this.focusInModal(e);
            }

            if (e.code === 'Escape') {
              if (new Date().getTime() - this.lastClick < this.speed) return;
              this.lastClick = new Date().getTime();
              this.closeModal(this.window);
              e.preventDefault();
            }
          }
        });
      }
    });
  }

  getDataPath(btnEl) {
    const getDataTarget = btnEl.dataset.modal;
    this.window = document.querySelector(`[${this.options.modalWindowName}="${getDataTarget}"]`);
    this.modalCloseBtn = this.window.querySelector(`[${this.options.modalCloseBtnName}]`);

    if (btnEl.hasAttribute(`${this.options.modalWindowSpeedName}`)) {
      this.speed = btnEl.dataset.modalSpeed;
    } else {
      this.speed = this.options.defaultSpeed;
    }
  }

  openModal(windowEl) {
    this.previusFocusElem = document.activeElement;
    this.documentFocusElems = document.querySelectorAll(this.focusElems);
    this.navigationOff(this.documentFocusElems);
    this.focusToModal(windowEl);
    this.disableScroll();
    this.modalOverlay.classList.add(this.options.modalOverlayBlockName);
    this.modalOverlay.style.setProperty('--transition-modal-time', `${this.speed / 1000}s`);
    windowEl.classList.add(this.options.modalWindowBlockName);
    setTimeout(() => {
      windowEl.classList.add(this.options.modalWindowShowName);
    });
    setTimeout(() => {
      this.modalOpened = true;
      this.navigationOn(this.documentFocusElems);
    }, this.speed);
    this.options.isOpen(this);
  }

  closeModal(windowEl) {
    this.focusToBtn();
    this.modalOverlay.classList.remove(this.options.modalOverlayBlockName);
    windowEl.classList.remove(this.options.modalWindowShowName);
    setTimeout(() => {
      this.modalOverlay.removeAttribute('style');
      windowEl.classList.remove(this.options.modalWindowBlockName);
      this.modalOpened = false;
      this.enableScroll();
      this.navigationOn(this.documentFocusElems);
    }, this.speed);
    this.options.isClose(this);
  }

  focusToModal(windowEl) {
    this.modalFocusElems = Array.from(windowEl.querySelectorAll(this.focusElems));

    if (!this.modalCloseBtn && this.options.autoFocusToCloseBtn || !this.options.autoFocusToCloseBtn && this.modalFocusElems.length > 0) {
      setTimeout(() => {
        this.modalFocusElems[0].focus();
      }, this.speed);
    }

    if (this.modalCloseBtn && this.options.autoFocusToCloseBtn) {
      setTimeout(() => {
        this.modalCloseBtn.focus();
      }, this.speed);
    }
  }

  focusToBtn() {
    setTimeout(() => {
      this.previusFocusElem.focus();
    }, this.speed);
  }

  focusInModal(e) {
    const focusArray = Array.prototype.slice.call(this.modalFocusElems);
    const focusedIndex = focusArray.indexOf(document.activeElement);

    if (!e.shiftKey && focusedIndex === focusArray.length - 1 && focusArray.length > 0) {
      this.modalFocusElems[0].focus();
      e.preventDefault();
    }

    if (focusArray.length === 0) {
      this.navigationOff(this.documentFocusElems);
    }

    if (e.shiftKey && focusedIndex === 0) {
      this.modalFocusElems[this.modalFocusElems.length - 1].focus();
      e.preventDefault();
    }
  }

  navigationOn(documentFocusElems) {
    documentFocusElems.forEach(documentFocusEl => {
      documentFocusEl.removeAttribute('tabIndex');
    });
  }

  navigationOff(documentFocusElems) {
    documentFocusElems.forEach(documentFocusEl => {
      documentFocusEl.tabIndex = -1;
    });
  }

  disableScroll() {
    let scrollWidth = window.innerWidth - document.body.offsetWidth + 'px';
    document.body.style.paddingRight = scrollWidth;
    let pagePosition = window.scrollY;
    document.body.classList.add(this.options.disableScrollName);
    document.body.dataset.position = pagePosition;
    document.body.style.top = -pagePosition + 'px';
  }

  enableScroll() {
    document.body.classList.remove(this.options.disableScrollName);
    document.body.removeAttribute('style');
    let pagePosition = parseInt(document.body.dataset.position, 10);
    window.scroll({
      top: pagePosition,
      left: 0
    });
    document.body.removeAttribute('data-position');
  }

  reOpenModal(previusActiveWindowEl, windowEl) {
    previusActiveWindowEl.classList.remove(this.options.modalWindowShowName);
    setTimeout(() => {
      this.enableScroll();
      previusActiveWindowEl.classList.remove(this.options.modalWindowBlockName);
      this.openModal(windowEl);
    }, this.speed);
  }

}
// EXTERNAL MODULE: ./src/Rmodal.css
var src_Rmodal = __webpack_require__(231);
;// CONCATENATED MODULE: ./src/index.js


__webpack_require__.g.Rmodal = Rmodal;
}();
/******/ })()
;